Java Collection
데이터를 효율적으로 관리하고 조작하기 위한 데이터 구조와 알고리즘의 집합

주요 인터페이스 : List Set Map Queue

인터페이스로 만들어진 객체 : ArrayList, HashSet, LinkedList, HashMap


인터페이스                  특징              인터페이스로 만들어진 객체

List          순서가있는 데이터, 중복 허용     ArrayList, LinkedList, Vector
Set           순서가없고 중복을 허용하지 않음  HashSet, TreeSet, LinkedHashSet
Map           키-값이 짝꿍형태로 데이터를 관리  HashMap, TreeMap, LinkedHashMap
Queue         FIFO(First in, First Out)요소 처리 LinkedList, PriorityQueue
Deque         양쪽 끝에서 삽입 및 삭제가 가능한 Queue ArrayDeque, LinkedList



Collection (상위 인터페이스)
 ├── List: 순서 있는 컬렉션
 │     ├── ArrayList
 │     ├── LinkedList
 │     └── Vector (Thread-Safe)
 ├── Set: 중복 없는 컬렉션
 │     ├── HashSet                     : [순서가 중요하지 않을 경우] 순서 보장x, 중복 제거 및 빠른 검색 속도
 │     ├── TreeSet (정렬 지원)           : [정렬된 상태가 필요할 때] 정렬된 상태로 저장, 삽입 및 삭제 속도가 HashSet보다 느림,
 │     │                                 메모리 사용량이 많음
 │     └── LinkedHashSet (삽입 순서 유지) : [삽입 순서를 유지해야 할 때] 삽입된 순서를 유지/ 중복을 허용하지 않되
 │                                       순서를 유지해야할 경우 사용
 │                                       추가적인 순서 유지 비용으로 메모리 사용량 증가
 │
 └── Queue: 순서에 따라 처리되는 컬렉션
       ├── PriorityQueue (우선순위 큐)
       └── Deque (양방향 큐)
Map (키-값 쌍을 다루는 인터페이스)
 ├── HashMap (빠른 접근 속도)
 ├── TreeMap (정렬된 키 관리)
 └── LinkedHashMap (삽입 순서 유지)